"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var src_1 = require("../src");
function fullCycle(obj, options) {
    return src_1.fromJSON(JSON.parse(JSON.stringify(src_1.toJSON(obj, options))));
}
function produceError() {
    return new Error('message');
}
describe('javascript-serializer', function () {
    it('should serialize errors', function () {
        var error = fullCycle(new Error('message'));
        chai_1.expect(error).to.be.instanceof(Error);
        chai_1.expect(error.toString()).to.eql('Error: message');
        chai_1.expect(typeof error.stack).to.eql('string');
    });
    it('should contain the original stack trace', function () {
        var error = fullCycle(produceError());
        chai_1.expect(error.stack).to.contain('produceError');
    });
    it('should not contain the original stack trace', function () {
        var error = fullCycle(produceError(), { stack: false });
        chai_1.expect(error.stack).to.not.contain('produceError');
    });
    it('should serialize objects', function () {
        var data = {
            a: 1,
            b: 'str',
            c: { d: 2, e: 'str', f: [{ g: 3 }, { e: null }] },
        };
        chai_1.expect(fullCycle(data)).to.eql(data);
    });
    it('should serialize objects that deeply contain an error', function () {
        var error = fullCycle({ error: new Error('message') }).error;
        chai_1.expect(error).to.be.instanceof(Error);
    });
    it('should serialize dates', function () {
        var utc = Date.UTC(1981, 12, 27, 1, 2, 3, 4);
        var date = fullCycle(new Date(utc));
        chai_1.expect(date).to.be.instanceof(Date);
        chai_1.expect(date.getTime()).to.eql(utc);
    });
    it('should serialize regexp', function () {
        var regexp = /abc/gi;
        chai_1.expect(regexp.exec('_ABC_')).to.eql(['ABC']); //lastIndex 0 => 4
        regexp = fullCycle(regexp);
        chai_1.expect(regexp.exec('_ABC_')).to.eql(null); //lastIndex 4 => 0
        chai_1.expect(regexp.exec('_ABC_')).to.eql(['ABC']); //lastIndex 0 => 4
    });
    it('should allow adding custom data types', function () {
        var Person = /** @class */ (function () {
            function Person(firstName, lastName) {
                var _this = this;
                this.firstName = firstName;
                this.lastName = lastName;
                this.fullName = function () { return _this.firstName + " " + _this.lastName; };
                this.toJSON = function () { return ({ firstName: _this.firstName, lastName: _this.lastName }); };
            }
            Person.fromJSON = function (_a) {
                var firstName = _a.firstName, lastName = _a.lastName;
                return new Person(firstName, lastName);
            };
            return Person;
        }());
        var aPerson = new Person('Shahar', 'Talmi');
        src_1.addDataType(Person);
        chai_1.expect(fullCycle(aPerson).fullName()).to.eql('Shahar Talmi');
    });
    it('should allow adding custom serializable data types', function () {
        var Person = /** @class */ (function () {
            function Person(firstName, lastName) {
                var _this = this;
                this.firstName = firstName;
                this.lastName = lastName;
                this.fullName = function () { return _this.firstName + " " + _this.lastName; };
            }
            return Person;
        }());
        var SerializablePerson = /** @class */ (function () {
            function SerializablePerson(person) {
                var _this = this;
                this.person = person;
                this.toJSON = function () { return ({
                    firstName: _this.person.firstName,
                    lastName: _this.person.lastName,
                }); };
            }
            SerializablePerson.fromJSON = function (_a) {
                var firstName = _a.firstName, lastName = _a.lastName;
                return new Person(firstName, lastName);
            };
            return SerializablePerson;
        }());
        var aPerson = new Person('Shahar', 'Talmi');
        src_1.addDataType(SerializablePerson, Person);
        chai_1.expect(fullCycle(aPerson).fullName()).to.eql('Shahar Talmi');
    });
    it('should serialize circular references', function () {
        var data = {
            a: 1,
            b: 'str',
            c: { d: 2, e: 'str', f: null },
            g: { h: 3 },
            i: [],
        };
        data.c.f = data.c;
        data.i.push(data.g);
        data.i.push(data.c);
        chai_1.expect(fullCycle(data)).to.eql(data);
    });
});
//# sourceMappingURL=index.spec.js.map